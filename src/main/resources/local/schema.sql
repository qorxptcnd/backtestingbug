-- 기존 JOB 테이블 삭제 --
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_INSTANCE;

-- 기존 SAMPLE 테이블 삭제 --
DROP TABLE IF EXISTS STUDENT;

-- 기존 PORTFOLIO, STOCK 테이블 삭제 --
DROP TABLE IF EXISTS PORTFOLIO_STOCK;
DROP TABLE IF EXISTS STOCK_HISTORY;
DROP TABLE IF EXISTS STOCK_DIVIDEND;
DROP TABLE IF EXISTS STOCK;
DROP TABLE IF EXISTS PORTFOLIO;

-- 시퀀스 테이블 삭제 --
DROP TABLE IF EXISTS BATCH_JOB_SEQ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_SEQ;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_SEQ;

-- SAMPLE 테이블 --
CREATE TABLE STUDENT (
  ID bigint(20) NOT NULL,
  NAME varchar(100) DEFAULT NULL,
  AGE bigint(20) NOT NULL,
  MAJOR_CD varchar(255) DEFAULT NULL,
  PRIMARY KEY (ID)
) ENGINE=InnoDB;


-- 포트폴리오 테이블 --
CREATE TABLE PORTFOLIO (
    PRTFL_ID BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PRTFL_NM VARCHAR(200) NOT NULL,
    PRTFL_SYMBOL VARCHAR(10) NOT NULL,
    PRTFL_DESC VARCHAR(4000),
    PRTFL_CAGR DECIMAL(10,5) NOT NULL,
    PRTFL_RBLNC_DESC VARCHAR(1000),

    LAST_UPDATE_SERVICE_NM VARCHAR(200) NOT NULL,
    LAST_UPDATE_DTTM DATETIME NOT NULL,
    FIRST_INSERT_SERVICE_NM VARCHAR(200) NOT NULL,
    FIRST_INSERT_DTTM DATETIME NOT NULL,

    constraint PRTFL_SYMBOL unique (PRTFL_SYMBOL)
) ENGINE=InnoDB;

-- 주식 테이블 --
CREATE TABLE STOCK (
    STOCK_ID BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    STOCK_NM VARCHAR(200) NOT NULL,
    STOCK_SYMBOL VARCHAR(10) NOT NULL,
    STOCK_MARKET_CAP_PRICE DECIMAL(20,5) NOT NULL,
    STOCK_SHARES_AMT BIGINT(10) NOT NULL,
    CURRENCY_CD VARCHAR(10) NOT NULL,
    STOCK_EXCHANGE_CD VARCHAR(10) NOT NULL,

    LAST_UPDATE_SERVICE_NM VARCHAR(200) NOT NULL,
    LAST_UPDATE_DTTM DATETIME NOT NULL,
    FIRST_INSERT_SERVICE_NM VARCHAR(200) NOT NULL,
    FIRST_INSERT_DTTM DATETIME NOT NULL,

    constraint STOCK_SYMBOL unique (STOCK_SYMBOL)
) ENGINE=InnoDB;

-- 일단위 주식 정보 --
CREATE TABLE STOCK_HISTORY (
    STOCK_ID BIGINT(20) UNSIGNED NOT NULL,
    BASE_DT DATE NOT NULL,
    OPEN_PRICE DECIMAL(20,5) NOT NULL,
    LOW_PRICE DECIMAL(20,5) NOT NULL,
    HIGH_PRICE DECIMAL(20,5) NOT NULL,
    CLOSE_PRICE DECIMAL(20,5) NOT NULL,
    ADJUST_CLOSE_PRICE DECIMAL(20,5) NOT NULL,
    VOLUME_AMT BIGINT(10) UNSIGNED NOT NULL,

    LAST_UPDATE_SERVICE_NM VARCHAR(200) NOT NULL,
    LAST_UPDATE_DTTM DATETIME NOT NULL,
    FIRST_INSERT_SERVICE_NM VARCHAR(200) NOT NULL,
    FIRST_INSERT_DTTM DATETIME NOT NULL,

    PRIMARY KEY(STOCK_ID, BASE_DT),
	constraint STOCK_HISTORY_FK foreign key (STOCK_ID) references STOCK(STOCK_ID)
) ENGINE=InnoDB;


-- 주식 배당 내역 --
CREATE TABLE STOCK_DIVIDEND (
    STOCK_ID BIGINT(20) UNSIGNED NOT NULL,
    BASE_DT DATE NOT NULL,
    ADJUST_DIVIDEND_PRICE DECIMAL(20,5) NOT NULL,

    LAST_UPDATE_SERVICE_NM VARCHAR(200) NOT NULL,
    LAST_UPDATE_DTTM DATETIME NOT NULL,
    FIRST_INSERT_SERVICE_NM VARCHAR(200) NOT NULL,
    FIRST_INSERT_DTTM DATETIME NOT NULL,

    PRIMARY KEY(STOCK_ID, BASE_DT),
	constraint STOCK_DIVIDEND_FK foreign key (STOCK_ID) references STOCK(STOCK_ID)
) ENGINE=InnoDB;

-- 포트폴리오 구성 주식 --
CREATE TABLE PORTFOLIO_STOCK (
    PRTFL_ID BIGINT(20) UNSIGNED NOT NULL,
    STOCK_ID BIGINT(20) UNSIGNED NOT NULL,
    INVEST_RATIO DECIMAL(3,1) NOT NULL,
    RBLNC_PERIOD_CD VARCHAR(10) NOT NULL,

    LAST_UPDATE_SERVICE_NM VARCHAR(200) NOT NULL,
    LAST_UPDATE_DTTM DATETIME NOT NULL,
    FIRST_INSERT_SERVICE_NM VARCHAR(200) NOT NULL,
    FIRST_INSERT_DTTM DATETIME NOT NULL,

    PRIMARY KEY(PRTFL_ID, STOCK_ID),
	constraint PORTFOLIO_STOCK_FK1 foreign key (PRTFL_ID) references PORTFOLIO(PRTFL_ID),
	constraint PORTFOLIO_STOCK_FK2 foreign key (STOCK_ID) references STOCK(STOCK_ID)
) ENGINE=InnoDB;

-- JOB 관련 테이블, 시퀀스 --
CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME DATETIME(6) NOT NULL,
	START_TIME DATETIME(6) DEFAULT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	TYPE_CD VARCHAR(6) NOT NULL ,
	KEY_NAME VARCHAR(100) NOT NULL ,
	STRING_VAL VARCHAR(250) ,
	DATE_VAL DATETIME(6) DEFAULT NULL ,
	LONG_VAL BIGINT ,
	DOUBLE_VAL DOUBLE PRECISION ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	START_TIME DATETIME(6) NOT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);